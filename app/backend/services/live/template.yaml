AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: serverless WebSocket + REST API for chat rooms (Python)

Parameters:
  SecretsRegionName:
    Type: String
    Description: Region name where the secrets are stored
    Default: eu-central-1
  JwtSecretName:
    Type: String
    Description: Name of the secret in Secrets Manager that contains the JWT secret
    Default: python-lambda-app/prod/jwt-secret
  LayerStackName:
    Type: String
    Description: Name of the stack where the layer is deployed
    Default: layers
  StageName:
    Type: String
    Description: Stage of app deployment (develop, prod)
    Default: prod

# Global Settings
Globals:
  Function:
    Timeout: 60
    MemorySize: 512

Resources:
  ### REST API ###
  LiveChatApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: LiveChat
      StageName: api-v1
      Cors:
        AllowMethods: "'OPTIONS,POST'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'*'"

  # Websocket API setup
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  # Connect
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ConnectInteg

  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations

  # Disconnect
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref DisconnectInteg

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations

  # Send message
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref SendInteg

  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - SendRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref WebSocketApi

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref StageName
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebSocketApi

  # Lambda functions
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./onConnectWss
      Handler: app.lambda_handler
      Runtime: python3.12
      Layers:
        - !Sub "{{resolve:ssm:/layers/common/latest}}"
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !ImportValue
            Fn::Sub: "${LayerStackName}-${StageName}-ConnectionsTable"
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./onDisconnectWss
      Handler: app.lambda_handler
      Runtime: python3.12
      Layers:
        - !Sub "{{resolve:ssm:/layers/common/latest}}"
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !ImportValue
            Fn::Sub: "${LayerStackName}-${StageName}-ConnectionsTable"
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
              Resource: "*"

  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  SendMessageFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./sendMessageWss
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          MESSAGE_HISTORY_TABLE_NAME: !Ref MessageHistoryTable
          CHAT_ROOM_TABLE_NAME: !Ref ChatRoomTable
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTable
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "execute-api:ManageConnections"
              Resource: "*"

  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com

  # Endpoints
  CreateRoomFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: createRoom/
      Handler: app.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          CHAT_ROOM_TABLE: !ImportValue
            Fn::Sub: "${LayerStackName}-${StageName}-ChatRoomTable"
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Layers:
        - !Sub "{{resolve:ssm:/layers/common/latest}}"
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        CreateRoomEndpoint:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId: !Ref LiveChatApi

  JoinRoomFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: joinRoom/
      Handler: app.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          CHAT_ROOM_TABLE: !ImportValue
            Fn::Sub: "${LayerStackName}-${StageName}-ChatRoomTable"
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Layers:
        - !Sub "{{resolve:ssm:/layers/common/latest}}"
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        JoinRoomEndpoint:
          Type: Api
          Properties:
            Path: /{room_id}/join
            Method: POST
            RestApiId: !Ref LiveChatApi

Outputs:
  ConnectionsTableArn:
    Description: "Connections table ARN"
    Value: !GetAtt ConnectionsTable.Arn

  ChatRoomTableArn:
    Description: "Chat room table ARN"
    Value: !GetAtt ChatRoomTable.Arn

  EndpointURI:
    Description: "API Gateway endpoint URL for Live chat microservice apis"
    Value: !Sub "https://${LiveChatApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
